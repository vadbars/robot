const util = require('util')
const Promise = require("bluebird")
const _ = require('lodash')
const golos = require('steem')
golos.config.set('websocket','wss://ws.golos.io');
// –õ–æ–∫–∞–ª—å–Ω–∞—è –Ω–æ–¥–∞ ws://localhost:9090 
// –ù–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –±–µ–∑ –Ω–æ–¥—ã –≥–æ–ª–æ—Å–∞ –∏–ª–∏ steem —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–¥—Ä–µ—Å –ø—É–±–ª–∏—á–Ω–æ–π –Ω–æ–¥—ã
// –ù–∞–ø—Ä–∏–º–µ—Ä wss://ws.golos.io
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –∫ –∫–∞–∫–æ–º—É –±–ª–æ–∫—á–µ–π–Ω—É –≤—ã –Ω–∞–º–µ—Ä–µ–Ω—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –£–±–µ—Ä–∏—Ç–µ 2 —Å—Ç—Ä–æ–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Å—Ç–∏–º
golos.config.set('address_prefix','GLS');
golos.config.set('chain_id','782a3039b478c839e4cb0c941ff4eaeb7df40bdd68bd441afd444b9da763de12');

// –õ–æ–≥–∏–Ω –±–æ—Ç–∞
const botname = 'goloswiki'

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –û–ë–°–£–ñ–î–ê–ï–ú–û–ï –Ω–∞ https://golos.io/@USERNAME/permissions 
const wif = '5...'

// –°—É–º–º–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const ammount = '0.001 GOLOS'

// –õ–æ–≥–∏–Ω –∞–≤—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å
const winner  = 'goloswiki'

// –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –∞–≤—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å
const post    = 'permlink'

// –†–∞–∑–º–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏
const ammountw = '0.001 GOLOS'

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –ø–ª–∞—Ç–µ–∂—É - –æ–Ω–æ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
const memo = `üí∞ –í–∞—à –ø–æ—Å—Ç –ø–æ–ø–∞–ª –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è wikibot. –ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –≤–∞—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –°–ø–∞—Å–∏–±–æ!`


// –ù–µ–±–æ–ª—å—à–æ–π —Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤
let trig = {
	existBlock:true
	// –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
}

const blacklist = 'robot'

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
const dynamicSnap = new Promise((resolve, reject) => {
    golos.api.getDynamicGlobalProperties((err, res) => {
        if (err) {
        console.log(err)
		}
        else {
            resolve(res)
        }
    })
})


// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
const FIRSTBLOCK = n => n.head_block_number

// –î–æ—Å—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const OPS = (ops) => {
    return _.flatten(ops.transactions.map(tx => tx.operations))
}

// –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ —Å–≤–æ–µ–º—É
const OPSFILTER = (operation) => {
const [type, data] = operation

// –û–ø–æ–∑–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤
	if (type === 'vote') { 
	// –ï—Å–ª–∏ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –∞–≤—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º...
	if (data.author === winner) {
		// –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å && data.author === post, —á—Ç–æ–±—ã –±–æ—Ç —É—á–∏—Ç—ã–≤–∞–ª –≥–æ–ª–æ—Å–∞ —Ç–æ–ª—å–∫–æ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –¥–æ–Ω–∞—Ç —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º
// 		golos.broadcast.transfer(wif, botname, winner, ammountw, memo,
// 						 function(err, result) {
// 							  if(err){
// 						console.log(err);  
// 					  } else {
						  console.log(`–î–æ–Ω–∞—Ç ${winner} ${ammountw}`)
// 					  }
// 							 });
// 						}
			}
				
	// –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞, –æ—Ç–ø–∏—Å–∫–∞, –∏–≥–Ω–æ—Ä –∏–ª–∏ —Ä–µ–±–ª–æ–≥			
    if (type === 'custom_json') {
	if(typeof data.json !== 'undefined'){
		const initiator = data.required_posting_auths;
        const reblogData = JSON.parse(data.json);
		
		if  (reblogData[0] === 'reblog') {
          // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –±–∏–∑–Ω–µ—Å –º–æ–ª–æ–¥–æ—Å—Ç–∏ –∏ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
           if(!reblogData[1].author.includes('bm-') && reblogData[1].author !=="oxisunbeam"){
			
			
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–±–ª–æ–≥–µ
// 			golos.broadcast.transfer(wif, botname, reblogData[1].author, ammount, `‚ö° @${initiator} —Å–¥–µ–ª–∞–ª —Ä–µ–ø–æ—Å—Ç –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ üëâ ${reblogData[1].permlink}`, function(err, result) {
//                 	  if(err){
// 						console.log(err);  
// 					  } else {
						  console.log(`@${initiator} —Å–¥–µ–ª–∞–ª —Ä–µ–ø–æ—Å—Ç ${reblogData[1].permlink} `)
// 					  }					  
//                 	});        
			}		
		} 
		// –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏, –æ—Ç–ø–∏—Å–∫–∏, –±–ª–æ–∫–∞
        else if (reblogData[0] === 'follow') {			
			const data = reblogData[1].what[0];
			const user = reblogData[1].following;
			
			if(!user.includes('bm-') && !blacklist.includes(initiator) && user !=="oxisunbeam"){
			
			// –î–µ—Ç–µ–∫—Ç–∏–º –∏–≥–Ω–æ—Ä
			if (data === 'ignore'){
				
//             golos.broadcast.transfer(wif, botname, user, ammount, `üö© @${initiator} –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –∏–≥–Ω–æ—Ä`, function(err, result) {
//                 	  if(err){
// 						console.log(err);  
// 					  } else {
						  console.log(`@${initiator} –¥–æ–±–∞–≤–∏–ª –≤ –∏–≥–Ω–æ—Ä  ${reblogData[1].following}`) 
// 					  }
//                 	});				
			}
			// –î–µ—Ç–µ–∫—Ç–∏–º –ø–æ–¥–ø–∏—Å–∫—É
			else if(data === 'blog'){	
				
//             golos.broadcast.transfer(wif, botname, user, ammount, `üëç @${initiator} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–∞—à –±–ª–æ–≥!`, function(err, result) {
//                 	   if(err){
// 						console.log(err);  
// 					  } else {
						  console.log(`@${initiator} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞  ${reblogData[1].following}`)
// 					  }
//                 	});
			}
			// –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –æ—Ç–ø–∏—Å–∫–∞
			else {
				
//             golos.broadcast.transfer(wif, botname, user, ammount, `‚ùó @${initiator} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞`, function(err, result) {
//                 	   if(err){
// 						console.log(err);  
// 					  }else{
						  console.log(`@${initiator} –û–¢–ü–ò–°–ê–õ–°–Ø –æ—Ç ${reblogData[1].following}`)
// 					  }
//                 	});
			}
			
		 }
        }
    }
	}
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if (type === 'comment') {
    // –ï—Å–ª–∏ –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	// –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ—Å—Ç –≤—ã–∑–æ–≤–æ–º golos.get_content('–õ–æ–≥–∏–Ω','–°—Å—ã–ª–∫–∞', function(err, result) {}); –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
	// let isNew = Date.parse(result.last_update) < Date.parse(result.create); 
	// if(isNew){ /*    */}
	const metaData = JSON.parse(data.json_metadata)
	if (typeof metaData.users !== 'undefined') {
		const mentions = metaData.users
	// –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: 
	//&& metaData.app !== "habreplicator"
	// –ò–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä bm –∞–∫–∫–∞—É–Ω—Ç—ã
	//if (metaData.users[0].length > 1 && !metaData.users[0].includes('bm-') && metaData.users[0] !=="oxisunbeam") {}
            
				for (let mention of mentions) {
// 					golos.broadcast.transfer(wif, botname, mention, ammount, `üí° @${data.author} —É–ø–æ–º—è–Ω—É–ª –≤–∞—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏  https://golos.io/@${data.author}/${data.permlink} `, function(err, result) {
//                 	   if(err){
// 						console.log(err);  
// 					  } else {
						  console.log(`@${mention} —É–ø–æ–º—è–Ω—É—Ç —Ç—É—Ç @${data.author}${data.permlink}`)
// 					  }
//                 	});
				}
	}
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
const SENDBLOCK = currentblock => {
    golos.api.getBlock(currentblock, (err, result) => {
  		if (err) {
            console.log(err)
        } 
		else if (result === null){
			// –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä 
					trig.existBlock = false
				}
        else {
			// –ï—Å–ª–∏ –±–ª–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
			OPS(result)
			.forEach(OPSFILTER)
			trig.existBlock = true
			
		}
	
    })
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
// –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ 1
const NEXTBLOCKS = firstblock => {
    let currentblock = firstblock
    setInterval(() => {
		// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
		if(trig.existBlock){
					currentblock++
				}
		SENDBLOCK(currentblock)
         
    }, 3000)
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ–±–µ—â–∞–Ω–∏—è (promises)

dynamicSnap
    .then(FIRSTBLOCK)
    .then(NEXTBLOCKS)
    .catch(e => console.log(e));
